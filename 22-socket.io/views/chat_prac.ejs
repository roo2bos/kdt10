<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>socket.io</title>
		<!-- socket.io cdn -->
		<script src="/socket.io/socket.io.js"></script>
		<style>
			:root {
				--color: #02b479;
				--btnA: red;
			}
			h1 {
				text-align: center;
			}
			ul {
				height: 300px;
				overflow: auto;
				padding: 1rem;
				border-radius: 10px;
				background-color: var(--color);
			}
			ul::-webkit-scrollbar {
				width: 5px;
				height: 8px;
				margin: 10px;
				background-color: #aaa; /* or add it to the track */
			}

			/* Add a thumb */
			ul::-webkit-scrollbar-thumb {
				background: rgba(255, 255, 255, 0.4);
			}
			li {
				list-style: none;
				margin: 0.5rem 1rem 0.5rem 0;
				padding: 0;
			}
			.me {
				margin: 0.5rem 0 0.5rem 1rem;
				text-align: right;
			}
			.me span {
				background: #ff0;
			}
			li span {
				display: inline-block;
				padding: 0.5rem 1rem;
				border-radius: 5px;
				background-color: #fff;
			}
			li.notice {
				text-align: center;
				color: #00764f;
			}
			form {
				max-width: 500px;
				margin: 0 auto;
			}
			.input {
				display: grid;
				grid-template-columns: 1fr 3fr 1fr;
				gap: 5px;
			}
			input {
				padding: 0.5rem;
				border: 1px solid var(--color);
				border-radius: 5px;
				background-color: #02b4792b;
			}
			input::placeholder {
				color: var(--color);
			}
			button {
				color: var(--btnA);
				cursor: pointer;
				border-radius: 5px;
				border: 1px solid var(--color);
				background: var(--color);
			}
		</style>
	</head>
	<body>
		<h1>My Chat</h1>

		<!-- [실습 1] 각 버튼 누를때 마다 서버로 메세지 보내기 -->
		<form>
			<ul id="server-result"></ul>
			<div class="input">
				<input type="text" id="name" required placeholder="이름" />
				<input type="text" id="msg" required placeholder="메세지를 입력해주세요" />
				<button>전송</button>
			</div>
		</form>
		<script>
			//소켓 사용을 위한 객체 생성
			const socket = io.connect();
			const ul = document.querySelector('#server-result');
			socket.on('connect', () => {
				console.log('[클라이언트 연결 완료]socket.id: ', socket.id);
				const chatForm = document.forms[0];
				chatForm.addEventListener('submit', (event) => {
					event.preventDefault();
					if (!chatForm.checkValidity()) {
						chatForm.reportValidity();
						return;
					}
					const name = document.querySelector('#name').value;
					const msg = document.querySelector('#msg').value;
					// socket.emit('user', { who: name, msg: msg, id: socket.id });
					//
					socket.emit('every', { who: name, msg: msg, id: socket.id });
					document.forms[0].msg.value = '';
				});

				socket.on('user', (data) => {
					console.log('user data:', data);
					ul.insertAdjacentHTML('beforeend', `<li class='me'><span>${data.who}: ${data.msg}</span></li>`);
				});
				socket.on('other', (data) => {
					console.log('other data:', data);
					console.log(socket.id == data.id);
					if (socket.id != data.id) {
						ul.insertAdjacentHTML('beforeend', `<li class='other'><span>${data.who}: ${data.msg}</span></li>`);
					}
				});

				// [실습3]입장
				socket.on('notice', (data) => {
					console.log('notice messsage: ', data.msg);
					document.querySelector('ul').insertAdjacentHTML('beforeend', `<li class='notice'>${data.msg}</li>`);
				});

				//[실습4]
				socket.on('every', (data) => {
					console.log('user data:', data);
					ul.insertAdjacentHTML('beforeend', `<li class='me'><span>${data.who}: ${data.msg}</span></li>`);
				});
				socket.on('everyOther', (data) => {
					console.log('everyOther data:', data);
					console.log(socket.id == data.id);
					if (socket.id != data.id) {
						ul.insertAdjacentHTML('beforeend', `<li class='other'><span>${data.who}: ${data.msg}</span></li>`);
					}
				});
			});
		</script>
	</body>
</html>
